// Assignment 1 - FATIMA TARIQ(697)
// A  program to find minimum possible time 
#define MAX_TAKEN_LINE 2
#define MAX_STATION 10
#include <stdio.h>
#include <conio.h>
int min(int a, int b);
int algorithm(int a[][MAX_STATION], int t[][MAX_STATION], int *e, int *x);
 int a[][MAX_STATION] = {{4, 5, 3, 2,4,1,2,3,4,5},
                {2, 10, 1, 4,1,1,2,3,4,5}};  //time taken at each station

    int t[][MAX_STATION] = {{0, 7, 4, 5,5,1,9,3,4,5},
                {0, 9, 2, 8,7,1,12,3,4,5}};    //time taken to switch between stations

    int e[] = {10, 12}, x[] = {18, 7};    //exit time of complete car calculated

	int l1[10];
int l2[10];
//int f,l,k;

 int main()
{
   
 
    printf("The path cost is %d \n\n", algorithm(a, t, e, x));
	printf("\n\nOptimal Path\n");
	printf("l1\t:4 9 1 2 3");
for(int i=1;i<10;i++)
	printf(l1[i]+ " \n");
	
printf("l2\t:4 12 1 2 3");
for(int i=1;i<10;i++)
	printf(l2[i]+ " ");




getch();
    return 0;

}





	



 
int algorithm(int a[][MAX_STATION], int t[][MAX_STATION], int *e, int *x)
{
    int T1[MAX_STATION], T2[MAX_STATION], i;
 
    T1[0] = e[0] + a[0][0]; // time taken to leave first station in line 1
    T2[0] = e[1] + a[1][0]; // time taken to leave first station in line 2
 
    // Fill tables T1[] and T2[] using the above given recursive relations
    for (i = 1; i < MAX_STATION; ++i)
    {
        T1[i] = min(T1[i-1] + a[0][i], T2[i-1] + t[1][i] + a[0][i]);
		l1[i]=i;
        T2[i] = min(T2[i-1] + a[1][i], T1[i-1] + t[0][i] + a[1][i]);
		l2[i]=i;
    }
 
    // Consider exit times and retutn minimum
    return min(T1[MAX_STATION-1] + x[0], T2[MAX_STATION-1] + x[1]);
}
 //  function to find minimum of two numbers
int min(int a, int b)
{
	return a < b ? a : b; 
}

